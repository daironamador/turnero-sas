
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ymiohanwjypzkhjrtqlf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InltaW9oYW53anlwemtoanJ0cWxmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1NzQ4MTksImV4cCI6MjA1NzE1MDgxOX0.ELDyIr-4-YPmciAtSAguD7HmdW31SgSkGchLpeIHqFI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Función para crear un nuevo usuario
export const createUser = async (email: string, password: string, userData: any) => {
  try {
    // First, check if user already exists in the users table
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();
      
    if (existingUser) {
      console.log('Usuario ya existe en la tabla users:', existingUser);
      return { 
        user: existingUser, 
        error: null, 
        message: 'El usuario ya existe en el sistema.'
      };
    }
    
    // First, try to create the auth user directly via signup
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          name: userData.name,
          username: userData.username,
          role: userData.role,
          service_ids: userData.serviceIds
        }
      }
    });
    
    // If we hit the email rate limit or other signup error, create a user in the users table directly
    if (signUpError) {
      console.log('SignUp error:', signUpError.message);
      
      if (signUpError.message.includes('email rate limit')) {
        // Create a user record in the users table directly
        const { data: userData_created, error: userError } = await supabase
          .from('users')
          .insert([
            {
              email: email,
              username: userData.username,
              name: userData.name,
              role: userData.role,
              service_ids: userData.serviceIds,
              is_active: true
            }
          ])
          .select();

        if (userError) {
          console.error('Error al crear registro de usuario:', userError.message);
          return { user: null, error: userError, message: userError.message };
        }
        
        return { 
          user: userData_created ? userData_created[0] : null, 
          error: {
            name: 'EmailRateLimit',
            message: 'Se ha alcanzado el límite de envío de correos. El usuario fue creado correctamente, pero no se pudo enviar el correo de verificación.' 
          },
          message: 'Se ha alcanzado el límite de envío de correos. El usuario fue creado correctamente, pero no se pudo enviar el correo de verificación.'
        };
      }
      
      return { user: null, error: signUpError, message: signUpError.message };
    }
    
    // If signup successful, also create record in users table to ensure it exists
    if (signUpData.user) {
      // Check if user already exists in the users table
      const { data: existingUserData, error: existingUserError } = await supabase
        .from('users')
        .select('*')
        .eq('id', signUpData.user.id)
        .single();
        
      if (!existingUserError && existingUserData) {
        // User already exists in the users table, no need to create
        return { 
          user: signUpData.user, 
          error: null,
          message: 'Usuario creado correctamente. Se ha enviado un correo de verificación.'
        };
      }
      
      const { error: userError } = await supabase
        .from('users')
        .insert([
          {
            id: signUpData.user.id,
            email: email,
            username: userData.username,
            name: userData.name,
            role: userData.role,
            service_ids: userData.serviceIds,
            is_active: true
          }
        ]);
        
      if (userError) {
        console.error('Error al crear registro de usuario:', userError.message);
        // Continue anyway, auth user was created
      }
    }

    return { 
      user: signUpData.user, 
      error: null,
      message: 'Usuario creado correctamente. Se ha enviado un correo de verificación.'
    };
  } catch (error: any) {
    console.error('Error inesperado al crear usuario:', error);
    return { user: null, error, message: error.message };
  }
};
